// This is a Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id          String    @id
  displayName String
  products    Product[]
}

model Product {
  id              String                    @id
  displayName     String
  description     String                    @db.Text
  defaultSkuId    String
  category        Category                  @relation(fields: [categoryId], references: [id])
  categoryId      String
  skus            Sku[]
  details         ProductDetails[]
  skuIdFragments  Json
  hasModels       Boolean                   @default(false)
  estimator       String?
  stock           Stock[]
  restock         Restock[]
  pickupLocations PickupLocationOnProduct[]
  similar         SimilarProduct[]          @relation("similar")
  similarTo       SimilarProduct[]          @relation("similarTo")

  @@index([categoryId])
}

model SimilarProduct {
  relevance Int
  product   Product @relation("similar", fields: [productId], references: [id])
  productId String
  similar   Product @relation("similarTo", fields: [similarId], references: [id])
  similarId String

  @@id([productId, similarId])
  @@index([productId])
  @@index([similarId])
}

model PickupLocationOnProduct {
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  pickupLocation   PickupLocation @relation(fields: [pickupLocationId], references: [id])
  pickupLocationId String

  @@id([productId, pickupLocationId])
  @@index([productId])
  @@index([pickupLocationId])
}

model ProductDetails {
  matcher   String  @id
  product   Product @relation(fields: [productId], references: [id])
  productId String
  data      Json
  sku       Sku[]

  @@index([productId])
}

model Sku {
  id             String         @id
  displayName    String
  price          Float
  unit           String
  product        Product        @relation(fields: [productId], references: [id])
  productId      String
  quoteItems     QuoteItem[]
  stock          Stock[]
  details        ProductDetails @relation(fields: [detailsMatcher], references: [matcher])
  detailsMatcher String
  restockQueue   Restock[]

  @@index([productId])
  @@index([detailsMatcher])
}

model Stock {
  sku        Sku            @relation(fields: [skuId], references: [id])
  skuId      String
  quantity   Int
  location   PickupLocation @relation(fields: [locationId], references: [id])
  locationId String
  product    Product        @relation(fields: [productId], references: [id])
  productId  String

  @@id(fields: [skuId, locationId], name: "id")
  @@index([skuId])
  @@index([locationId])
  @@index([productId])
}

model Restock {
  sku        Sku            @relation(fields: [skuId], references: [id])
  skuId      String
  quantity   Int
  date       DateTime
  fulfilled  Boolean        @default(false)
  location   PickupLocation @relation(fields: [locationId], references: [id])
  locationId String
  product    Product        @relation(fields: [productId], references: [id])
  productId  String

  @@id(fields: [skuId, locationId], name: "id")
  @@index([skuId])
  @@index([locationId])
  @@index([productId])
}

model Quote {
  id        String      @id
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     QuoteItem[]
  title     String
  area      Float
  weight    Float
  subtotal  Float
  tax       Float
  total     Float

  @@index(title)
}

model QuoteItem {
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  quantity         Int
  price            Float
  sku              Sku            @relation(fields: [skuId], references: [id])
  skuId            String
  pickupLocation   PickupLocation @relation(fields: [pickupLocationId], references: [id])
  pickupLocationId String
  quote            Quote          @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId          String

  metadata Json?

  @@id(fields: [quoteId, skuId, pickupLocationId], name: "id")
  @@index([quoteId])
  @@index([skuId])
  @@index([pickupLocationId])
}

model PickupLocation {
  id           String                    @id
  displayName  String
  quoteItems   QuoteItem[]
  stock        Stock[]
  restockQueue Restock[]
  products     PickupLocationOnProduct[]
}
